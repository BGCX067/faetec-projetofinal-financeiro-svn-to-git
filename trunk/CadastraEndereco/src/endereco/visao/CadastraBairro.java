package endereco.visao;

import endereco.dao.BairroDao;
import endereco.dao.CidadeDao;
import endereco.dao.EstadoDao;
import endereco.modelo.Bairro;
import endereco.modelo.Cidade;
import endereco.modelo.Estado;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Carlos Alexandre
 */
public class CadastraBairro extends javax.swing.JDialog {

    List<Estado> estados = new ArrayList<Estado>();
    List<Cidade> cidades = new ArrayList<Cidade>();

    /** Creates new form CadastraBairro */
    public CadastraBairro(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public void limpar(){
        txtBairro.setText("");
        cbxEstado.setSelectedIndex(0);
    }

    public void focus(){
        txtBairro.requestFocus();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbxCidade = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtBairro = new javax.swing.JTextField();
        btnGravar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cbxEstado = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        cbxCidade.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecione" }));

        jLabel2.setText("Cidade:");

        jLabel1.setText("Bairro:");

        btnGravar.setText("Gravar");
        btnGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGravarActionPerformed(evt);
            }
        });

        jLabel3.setText("Estado:");

        cbxEstado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecione" }));
        cbxEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxEstadoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBairro))))
                .addGap(28, 28, 28)
                .addComponent(btnGravar)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtBairro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbxCidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(46, Short.MAX_VALUE)
                .addComponent(btnGravar)
                .addGap(65, 65, 65))
        );

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setLocation((screenSize.width-dialogSize.width)/2,(screenSize.height-dialogSize.height)/2);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        EstadoDao estadoDao = new EstadoDao();
        try {
            estados = estadoDao.retornaListaEstado("");
        } catch (Exception ex) {
            Logger.getLogger(CadastraBairro.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (Estado estado : estados) {
            getCbxEstado().addItem(estado.getEst_uf());
        }
    }//GEN-LAST:event_formWindowOpened

    private void btnGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGravarActionPerformed
        // TODO add your handling code here:
        if (getCbxEstado().getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Selecione uma Cidade!");
        } else if(getCbxCidade().getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(null, "Selecione uma Cidade!");
        } else if (txtBairro.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "DÃª nome a um Bairro!");
        } else {
            Bairro bairro = new Bairro();

            bairro.setBai_nome(txtBairro.getText().toUpperCase());
            //bairro.setCidade(getCidades.get(getCbxCidade().getSelectedIndex()-1));
            bairro.setCidade(getCidades().get(getCbxCidade().getSelectedIndex()));
            System.out.println(getCidades().get(getCbxCidade().getSelectedIndex()));
            System.out.println(getCbxCidade().getSelectedItem().toString());
            try {
                BairroDao bairroDao = new BairroDao();
                bairroDao.incluir(bairro);
                JOptionPane.showMessageDialog(null, "Dados Gravados com Sucesso!", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                Logger.getLogger(CadastraCidade.class.getName()).log(Level.SEVERE, null, ex);
            }
            int opcao = JOptionPane.showConfirmDialog(null, "Deseja inserir novo Bairro?", "Repetir Cadastro?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (opcao == JOptionPane.YES_OPTION) {
                limpar();
                focus();
            } else {
                dispose();
            }
        }
    }//GEN-LAST:event_btnGravarActionPerformed

    private void cbxEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxEstadoActionPerformed
        // TODO add your handling code here:
        carregaComboBoxCidades();
    }//GEN-LAST:event_cbxEstadoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                CadastraBairro dialog = new CadastraBairro(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGravar;
    private javax.swing.JComboBox cbxCidade;
    private javax.swing.JComboBox cbxEstado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField txtBairro;
    // End of variables declaration//GEN-END:variables

    public javax.swing.JComboBox getCbxCidade() {
        return cbxCidade;
    }

    public javax.swing.JComboBox getCbxEstado() {
        return cbxEstado;
    }

    public List<Cidade> getCidades() {
        return cidades;
    }

    public void carregaComboBoxCidades() {

        try {
            CidadeDao cidadeDao = new CidadeDao();
            List<Cidade> cidadesSelecionadas = new ArrayList<Cidade>();
            cidadesSelecionadas = cidadeDao.retornaCidadeDoEstado(estados.get(getCbxEstado().getSelectedIndex() - 1).getEst_cod());
            System.out.println(estados.get(getCbxEstado().getSelectedIndex() - 1).getEst_uf());
            System.out.println(cidadesSelecionadas);
            getCbxCidade().removeAllItems();
            for (Cidade cidade : cidadesSelecionadas) {
                getCbxCidade().addItem(cidade.getCid_nome());
            }
            cidades = cidadesSelecionadas;
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
}
